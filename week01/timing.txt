Input	Initial	Has	Number	AvgTime	AvgTime
Size	Order	Dups	of runs	forusel	forsort
5000	random	no	5	0.1624 sec	0.0048 sec
5000	sorted	no	5	0.0200 sec	0.0016 sec
5000	reverse	no	5	0.0152 sec	0.004 sec
5000	random	yes	5	0.1616 sec	0.004 sec
5000	sorted	yes	5	0.0192 sec	0.004 sec
5000	reverse	yes	5	0.0144 sec	0.0032 sec
10000	random	no	5	0.4584 sec	0.008 sec
10000	sorted	no	5	0.028 sec	0.004 sec
10000	reverse	no	5	0.028 sec	0.004 sec
10000	random	yes	5	0.462 sec	0.0096 sec
10000	sorted	yes	5	0.0296 sec	0.004 sec
10000	reverse	yes	5	0.028 sec	0.0048 sec
100000	random	no	3	58.76 sec	0.0906 sec
100000	sorted	no	3	0.17 sec	0.041 sec
100000	reverse	no	3	0.162 sec	0.052 sec
100000	random	yes	3	57.141 sec	0.1013 sec
100000	sorted	yes	3	0.177 sec	0.04133 sec
100000	reverse	yes	3	0.167 sec	0.05 sec
200000	random	no	3	238.408 sec	0.2106 sec
200000	sorted	no	3	0.272 sec	0.0896 sec
200000	reverse	no	3	0.272 sec	0.10667 sec
200000	random	yes	3	236.72 sec	0.2106 sec
200000	sorted	yes	3	0.228 sec	0.0946 sec
200000	reverse	yes	3	0.245 sec	0.108 sec

The Unix sort method was always faster than linked-list sort. From the results, there seemed to be negligible differences between sorting with duplicates or without duplicates for both methods. 
When the input was 100000, IntList took almost 1 min to sort random number whereas sort barely took 1 second. 
This result was expected because the IntList logic required a computer to iterate until the insertion is done. 
The computation would take a long time if the number to be inserted is near the very end of the list. Unix sort uses a more efficient logic to sort. 
Sorting a sorted list and reversed list using IntList took similar time because there was no need to loop through the list. This saved a lot of computation time.
